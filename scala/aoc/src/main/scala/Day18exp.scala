// object Day18Exp {

//     case class Pos(x: Int, y: Int)

//     case class Vault(graph: Map[Pos, Seq[Pos]], keyPos: Map[Pos, Char], doorPos: Map[Pos, Char], characterPos: Pos) {
//         def print: Unit = {
//             val minX = graph.keySet.map(_.x).min - 1
//             val maxX = graph.keySet.map(_.x).max + 1
//             val minY = graph.keySet.map(_.y).min - 1
//             val maxY = graph.keySet.map(_.y).max + 1

//             val walkable = graph.keySet
//             for (y <- minY to maxY) {
//                 val line = for (x <- minX to maxX) yield {
//                     val p = Pos(x, y)
//                     if (!walkable.contains(p)) '#'
//                     else if (keyPos.keySet.contains(p)) keyPos(p).toLower
//                     else if (doorPos.keySet.contains(p)) doorPos(p)
//                     else if (p == characterPos) '@'
//                     else '.'
//                 }
//                 println(line.mkString)
//             }
//         }
//     }

//     class DistanceFinder(initialVault: Vault) {
//         var reachable: Map[Char, Map[Char, (Int, Set[Char], Set[Char])]] = Map()

//         def init() = {
//             import scala.collection.mutable.Queue

//             // key -> otherKey -> (distance, doors passed, extra key pickups)

//             for (t <- vault.keyPos + (vault.characterPos -> '@')) t match {
//                 case (fromPos, key) =>
//                     var visited: Set[Pos] = Set(fromPos)
//                     val q: Queue[(Pos, Int, Set[Char], Set[Char])] = Queue((from, 0, Set(), Set()))
//                     while (!q.isEmpty) {
//                         val (p, dist, requiredKeys, extraKeys) = q.dequeue()

//                         if (p != fromPos && vault.keyPos.contains(p)) {
//                             val reachedKey = vault.keyPos(p)
//                             val currentWaysToReach = reachable.get(reachedKey).getOrElse(Map())
//                             if (currentWaysToReach.find())
//                             reachable = reachable + ((vault.keyPos(p), p) -> dist)
//                         }

//                         for (neighbor <- vault.graph(p).filter(n => !visited.contains(n) && !vault.doorPos.keySet.contains(n))) {
//                             q.enqueue((neighbor, dist + 1))
//                             visited = visited + neighbor
//                         }
//                     }
//             }
//         }

//         def reachableKeys

//     }

//     def reachableKeys(vault: Vault): Map[(Char, Pos), Int] = {
//         import scala.collection.mutable.Queue

//         var reachable: Map[(Char, Pos), Int] = Map()

//         val from = vault.characterPos
// 		var visited: Set[Pos] = Set(from)
// 		val q: Queue[(Pos, Int)] = Queue((from, 0))
// 		while (!q.isEmpty) {
// 			val (p, dist) = q.dequeue()

//             if (vault.keyPos.contains(p)) {
//                 reachable = reachable + ((vault.keyPos(p), p) -> dist)
//             }

// 			for (neighbor <- vault.graph(p).filter(n => !visited.contains(n) && !vault.doorPos.keySet.contains(n))) {
// 				q.enqueue((neighbor, dist + 1))
// 				visited = visited + neighbor
// 			}
// 		}

// 		reachable
//     }

//     class PathFinder() {
//         var memo: Map[Vault, Int] = Map()

//         val INF = 500000

//         def shortestPath(vault: Vault, maxDist: Int): Int = {
//             if (vault.keyPos.isEmpty) return 0
//             if (memo.contains(vault)) {
//                 println("Yay! I could reuse something!")
//                 return memo(vault)
//             }

//             val keyDistances: Map[(Char, Pos), Int] = reachableKeys(vault)
//             if (keyDistances.isEmpty) ???

//             if (keyDistances.filter(_._2 < maxDist).isEmpty) return INF

//             var bestDist = maxDist
//             for (keyDist <- keyDistances) keyDist match {
//                 case ((key, pos), dist) =>
//                     val newVault = Vault(vault.graph, vault.keyPos - pos, vault.doorPos.filter(_._2 != key), pos)
//                     val d = dist + shortestPath(newVault, bestDist - dist)
//                     if (d < bestDist) bestDist = d
//             }
//             if (bestDist < maxDist) {
//                 memo = memo + (vault -> bestDist)
//             }
//             bestDist
//         }
//     }

//     def part1(s: String = puzzleInput) = {
//         val vault = parseVault(s)
//         println(s"vault has ${vault.keyPos.size} keys, yielding ${math.pow(2, vault.keyPos.size)} combinations to explore")
//         val pathFinder = new PathFinder()
//         pathFinder.shortestPath(vault, pathFinder.INF)
//     }

//     def parseVault(s: String = puzzleInput): Vault = {
//         val lines: Array[String] = s.trim.split("\n").map(_.trim)
//         var map: Map[Pos, Seq[Pos]] = Map()
//         var keyPos: Map[Pos, Char] = Map()
//         var doorPos: Map[Pos, Char] = Map()
//         var initialPos: Pos = Pos(0, 0)
        
//         def valueAt(pos: Pos): Char = lines(pos.y)(pos.x)

//         def setNeighbors(p: Pos) = p match {
//             case Pos(x, y) =>
//                 val neighbors = Seq(Pos(x, y + 1), Pos(x, y - 1), Pos(x + 1, y), Pos(x - 1, y))
//                                 .filter(p => p.x >= 0 && p.x < lines(y).size && p.y >= 0 && p.y < lines.size)
//                                 .filter(p => valueAt(p) != '#')
//                 map = map + (p -> neighbors)
//         }

//         for (y <- 0 until lines.size; x <- 0 until lines(y).size) {
//             val p = Pos(x, y)
//             valueAt(p) match {
//                 case '#' =>
//                 case '.' =>
//                     setNeighbors(p)
//                 case '@' =>  
//                     setNeighbors(p)
//                     initialPos = p
//                 case c if c.isLower =>
//                     setNeighbors(p)
//                     keyPos = keyPos + (p -> c.toUpper)
//                 case c if c.isUpper =>
//                     setNeighbors(p)
//                     doorPos = doorPos + (p -> c)
//                 case s => println(s"wtf is '$s'?")
//             }
//         }

//         Vault(map, keyPos, doorPos, initialPos)
//     }

//     val example1 = 
//     """
//     #########
//     #b.A.@.a#
//     #########
//     """

//     val example2 =
//     """
//     ########################
//     #f.D.E.e.C.b.A.@.a.B.c.#
//     ######################.#
//     #d.....................#
//     ########################
//     """

//     val example3 =
//     """
//     ########################
//     #...............b.C.D.f#
//     #.######################
//     #.....@.a.B.c.d.A.e.F.g#
//     ########################
//     """

//     val example4 =
//     """
//     #################
//     #i.G..c...e..H.p#
//     ########.########
//     #j.A..b...f..D.o#
//     ########@########
//     #k.E..a...g..B.n#
//     ########.########
//     #l.F..d...h..C.m#
//     #################
//     """

//     val example5 =
//     """
//     ########################
//     #@..............ac.GI.b#
//     ###d#e#f################
//     ###A#B#C################
//     ###g#h#i################
//     ########################
//     """

//     val puzzleInput = """
//     #################################################################################
//     #.............#...#...O.#.#...........#.#...#.........#.......#.....#.......#.Z.#
//     #####.#######.#H#.#.###.#.#.#####.###.#.#.###.#####.#.#.#####.#.###.#.###.###.#.#
//     #.....#.#...#.#.#...#.#.#.#.#.#...#.....#.#...#...#.#.#...#w..#...#...#.#.....#.#
//     #.#####.#.#.#.#.#####.#.#.#B#.#.#########.#.###.#.#.#####.#.#####.#####.#######.#
//     #.#...#...#.....#...#.#.#.....#.........#.#.#...#.#.....#.#...#..y..#...#.....#.#
//     #.#.#.#.#########.#.#.#.###########.###.#.#.#.#######.###.###.#####.#.#.#.###.#.#
//     #.#.#...#.........#.#.......#.....#...#.#.#.#.#.....#.....#.#.#...#...#.#.#...#.#
//     #.###.###.#########.#######.#.###.#####.#.#.#.#.###.#######.#.#.#.#####.#.#.###.#
//     #...#.#.....#x....#.#..f..#...#...#...#.#.#.#.....#.....#i..#...#.#...#.#.#.#...#
//     #.#.#.#.#####.###.#.#A###.#####.###.#.#.#.#.#########.#.#.#.#####.#.#.###.#.#.#.#
//     #.#.#.#.#...#.#.#.#...#.#.#...#.#.T.#...#.#...#.....#.#...#.#.#..e#.#.....#.#.#.#
//     ###.###.#X#.#.#.#.#.###.#.###.#.###.###.#.###.#.###.#.#####.#.#.###.#######.#.#.#
//     #...#d..#.#...#.#.#.....#...#.#...#...#.#...#.#.#.....#.......#.#.....#.#...#.#.#
//     #.###.###.#####R#.#####.###.#.###.###.#.#.#.#.#.###########.###.#.###.#.#.#####.#
//     #...#.#.#...#.......#...#...#...#.....#.#.#...#.....#.....#.#...#...#.#...#...#.#
//     ###E#.#.###.#######.#####.###.#.#######.#.#####.###N#.###.###.###.###.#.###.#.#.#
//     #.#...#...#..c..#...#r..F.#...#.....#.#.#...#.#.#.#.#...#.#...#...#...#.....#.#.#
//     #.#####.#######.###.#.#######.#####.#.#.###.#.#.#.#.###.#.#.###.###.#########.#.#
//     #z....#.......#...#...#.....#s#.......#.#.#.#.....#...#.#...#v..#.#...#.....#...#
//     #.#.###.#.#######.#####G###.#.#######.#.#.#.#####.#.###.#######.#.###.#.#######.#
//     #.#.#...#.......#...#...#.#.#...#...#.#.#.#.....#.#...#.D.....#.....#.#.......#.#
//     ###.#.#########.###C#####.#.#.#.#.#.###.#.#####.#####.###############.#.#####.#.#
//     #...#...#.....#...#....g....#.#.#.#.....#.....#.....#...........#.....#.....#...#
//     #.#####.#.###.#.#############.#.#.#######.#########.#.#######.#.#.#########.#####
//     #.....#...#...#.#.........#...#.#.#.....#.........#.#.#.....#.#...#.......#.#..u#
//     #Q#.#######.###.#.#.#.#####.###.#.#####.#.#######.#.###.###.#.#####.###.#.#.#.###
//     #.#.......#.#...#.#.#.#...#.#.#...#...#.#.#.....#.#.#...#.#.#...#.....#.#.#.#...#
//     #.#####.###.#.###.#.###.#.#.#.#####.#.#.#.#.###.#.#.#.###.#.#.#.#######.#.#.#.#.#
//     #...#...#...#.....#.....#...#.......#...#.#.#.#.K.#...#.#...#.#.#.......#.#.#.#.#
//     ###.#.###.#####################.###.#####.#.#.#.#######.#.#####.#.#####.###.#.#.#
//     #...#.....#...#.....#.........#...#.#...#.#.#...#.......#...#...#...#...#...#.#.#
//     #.#########.###.###.#.###.###.###.#.#.#.###.#####.#.###.###.#.###.#.#.###.#####.#
//     #.#.....#.........#...#...#.#.#.#.#.#.#.#...#.....#.#l..#.#.#...#.#.#...#...#...#
//     #.###.#.###.###########.###.#.#.#.#.#.#.#.###.#####.#.###.#.###.#.#.#.#####.#.#.#
//     #.#...#...#...#...#.....#...#.#...#...#.#...#.#.#...#.....#.....#.#.#.#...#.#.#.#
//     #.#.#####.#.###.#.#.#####.###.#########.#.#.#.#.#.#################.###.#.#P#.#.#
//     #.#.#.....#.#...#.#...#.#...#.#.....#...#.#.#.#.#.#.................#...#...#.#.#
//     #.#.#.#######.###.###.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#########.#######.#######.#.#
//     #.U.#p........#....j..#...#.....#.....#...#.....#...........#...........J.....#.#
//     #######################################.@.#######################################
//     #...#.....#...#.......#.........#.........#.....#.....#.....#.....#.............#
//     #.#.#.###.###.#.#L###.#.#####.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#########.#.#
//     #.#...#.....#...#...#.#.#...#.....#...#.#...#.....#.....#.#.#.#.#.#.#.......#q#.#
//     #.#.#######.#.#####.#.###.#.#########.#.#.###############.###.#.#.###.#####.###.#
//     #.#.#.....#.#...#...#.....#.#.........#.#.#.....#.....#...#...#.#.....#...#...#.#
//     #.#.#.###.#.#####.#########.#.#########.#.#.#.#.#.###.#.###.###.#.#####.#.###.#.#
//     #.#.#...#.#.....#.....#...#...#.......#.#.#.#.#...#...#.#.....#.#.#...#.#...#...#
//     #.#####.#.#####.#####.#.#######.###.###.#.#.#.#####.###.#.#####.#.#.#.#.###.###.#
//     #.....#.#...#...#...#.#...........#...#.#k#.#...#.....#.#.#.....#.#.#.#...#...#.#
//     #####.#.###.###.#.#.#.#.#############.#.#.#.###.#.#####.#.#.#######.#.###.#.###.#
//     #.....#...#...#...#...#.#...........#...#.#...#.#...#...#.#...#...#.#...#.#.....#
//     #.#######.###.#####.#####.#########.#.###.#####.###.#.###.###.#.#.#.###.#.#######
//     #.......#...#.....#.#.....#.......#.#...#.......#.#.#.#...#.#...#.....#.#.#.....#
//     #.###.#####.#####.###.#####.#.#.###.#############.#.#.#.###.###########.#.#.###.#
//     #...#.#.........#...#.#.....#.#.#...#...#...#.....#.#...#...#.......#...#.#.#m..#
//     #.###.#.###########.#.#######.###.###.#.#.#.#.#.###.#####.#.#######.#.###.#.#.#.#
//     #.#...#...#.#.......#...#...#.W...#...#.#.#.#.#.....#.....#...#.....#...#.#.#.#.#
//     ###.#.###.#.#.#########.#.#.#####.###.#.#.###.#######.#######.#.###.###.#.###.#.#
//     #...#...#...#...#.....#...#.....#...#.#.#.#...#.........#.......#.#.#...#.....#.#
//     #.#########.###.#.#.###########.###.#.#.#.#.###.#######.#.#######.#.#.#########.#
//     #.........#.#...#.#.#....a......#.#...#.#.#...#.#.......#.#...#.....#.#...#.....#
//     #.#######.#.#.###.#.#############.#####.#.###.#.#.#######.#.###.#####.###.#.#####
//     #.#.....#...#.#...#.....#...#.......#h..#.....#.#.#.......#.#...#...#...#.#.#...#
//     #.###.#.#####.#.#####.#.#.#.#.#####.#.###.#######.#######.#.#####.#.###.#.#.#.#.#
//     #...#.#...#...#.#...#.#.#.#..o#...#...#.#.......#.......#.#.....#.#.#...#.....#.#
//     ###.#####.#.#.#.###.#.###.#######.#####.#######.#.#####.#######.#.#.#.###########
//     #.#...#...#.#.#.....#.....#.#.......#...#...#...#.....#.......#.#.#.#...#.......#
//     #.###.#.###.#.#####.#######.#.#I###.###.#.#.#.###########.###.#.#.#.###.#.#####.#
//     #...#...#...#.....#.#.#.....#.#...#t..#.#.#...#.........#.#.#.#...#...#...#.....#
//     #.#####.#.#########.#.#.###.#.###.###.#.#.#####.#######.#.#.#.#######.#####.#####
//     #...M...#.......#...#...#.#...#.#...#...#.......#.....#.#.#.........#.....#.#...#
//     #.#############.#.###.###.#####.###.#############.#####.#.#.#######.#####.#.###.#
//     #.#.....Y...#.#.#.#.#.#..b..#...#.#.#...#...#.........#.#.#.#...#.#.#...#...#...#
//     #.#.#######.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#####.#.#
//     #...#n....#.#.#...#.......#...#...#...#.#.#.#.#.....#...#.....#.#...#.#.......#.#
//     #####.###.#.#.###################.#####.#.###.#.###.#####V#####.#.###.###.#####.#
//     #.....#...#...#.....#...#...#.....#.....#.....#...#...........#.#...#.#...#.....#
//     #.###########.###.#.#.#.#.#.#######.###.#.#####################.###.###.###.#####
//     #.................#...#...#.........#.S.#.......................#.......#.......#
//     #################################################################################
//     """

// }