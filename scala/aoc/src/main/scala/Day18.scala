object Day18 {

    case class Pos(x: Int, y: Int)

    case class Vault(graph: Map[Pos, Seq[Pos]], keyPos: Map[Pos, Char], doorPos: Map[Pos, Char], characterPos: Seq[Pos]) {
        def print: Unit = {
            val minX = graph.keySet.map(_.x).min - 1
            val maxX = graph.keySet.map(_.x).max + 1
            val minY = graph.keySet.map(_.y).min - 1
            val maxY = graph.keySet.map(_.y).max + 1

            val walkable = graph.keySet
            for (y <- minY to maxY) {
                val line = for (x <- minX to maxX) yield {
                    val p = Pos(x, y)
                    if (!walkable.contains(p)) '#'
                    else if (keyPos.keySet.contains(p)) keyPos(p).toLower
                    else if (doorPos.keySet.contains(p)) doorPos(p)
                    else if (characterPos.contains(p)) '@'
                    else '.'
                }
                println(line.mkString)
            }
        }
    }

    def reachableKeys(vault: Vault): Map[(Char, Pos, Int), (Int, Set[Char])] = {
        import scala.collection.mutable.Queue

        var reachable: Map[(Char, Pos, Int), (Int, Set[Char])] = Map()

		var visited: Set[Pos] = vault.characterPos.toSet
		val q: Queue[(Int, Pos, Int, Set[Char])] = Queue()
        for (i <- 0 until vault.characterPos.size) {
            q.enqueue((i, vault.characterPos(i), 0, Set()))
        }
		while (!q.isEmpty) {
			val (characterIndex, p, dist, extraKeys) = q.dequeue()

            var addedKeys = extraKeys
            if (vault.keyPos.contains(p)) {
                val foundKey = vault.keyPos(p)
                reachable = reachable + ((foundKey, p, characterIndex) -> (dist, extraKeys))
                addedKeys = addedKeys + foundKey
            }

			for (neighbor <- vault.graph(p).filter(n => !visited.contains(n) && !vault.doorPos.keySet.contains(n))) {
				q.enqueue((characterIndex, neighbor, dist + 1, addedKeys))
				visited = visited + neighbor
			}
		}

		reachable
    }

    class PathFinder() {
        var memo: Map[(Seq[Pos], Set[Char]), Int] = Map()

        def shortestPath(vault: Vault): Int = {
            if (vault.keyPos.isEmpty) return 0
            val id = (vault.characterPos, vault.keyPos.values.toSet)
            if (memo.contains(id)) return memo(id)

            var keyDistances: Map[(Char, Pos, Int), (Int, Set[Char])] = reachableKeys(vault)
            if (keyDistances.isEmpty) ???

            val possibleDistances = for (keyDist <- keyDistances) yield keyDist match {
                case ((key, pos, characterIndex), (dist, extraKeys)) =>
                    val removedKeyPos: Set[Pos] = vault.keyPos.filter(k => extraKeys.contains(k._2)).map(_._1).toSet  + pos
                    val removedDoorPos: Set[Pos] = vault.doorPos.filter(d => extraKeys.contains(d._2) || d._2 == key).map(_._1).toSet

                    val newVault = Vault(vault.graph, 
                        vault.keyPos -- removedKeyPos, 
                        vault.doorPos -- removedDoorPos, 
                        vault.characterPos.updated(characterIndex, pos))
                    dist + shortestPath(newVault)
            }
            
            val minDist = possibleDistances.min
            memo = memo + (id -> minDist)

            minDist
        }
    }

    def part1(s: String = puzzleInputPart1) = {
        val vault = parseVault(s)
        println(s"vault has ${vault.keyPos.size} keys, yielding ${math.pow(2, vault.keyPos.size)} combinations to explore")
        val pathFinder = new PathFinder()
        pathFinder.shortestPath(vault)
    }

    def parseVault(s: String = puzzleInputPart1): Vault = {
        val lines: Array[String] = s.trim.split("\n").map(_.trim)
        var map: Map[Pos, Seq[Pos]] = Map()
        var keyPos: Map[Pos, Char] = Map()
        var doorPos: Map[Pos, Char] = Map()
        var initialPos: Seq[Pos] = Nil
        
        def valueAt(pos: Pos): Char = lines(pos.y)(pos.x)

        def setNeighbors(p: Pos) = p match {
            case Pos(x, y) =>
                val neighbors = Seq(Pos(x, y + 1), Pos(x, y - 1), Pos(x + 1, y), Pos(x - 1, y))
                                .filter(p => p.x >= 0 && p.x < lines(y).size && p.y >= 0 && p.y < lines.size)
                                .filter(p => valueAt(p) != '#')
                map = map + (p -> neighbors)
        }

        for (y <- 0 until lines.size; x <- 0 until lines(y).size) {
            val p = Pos(x, y)
            valueAt(p) match {
                case '#' =>
                case '.' =>
                    setNeighbors(p)
                case '@' =>  
                    setNeighbors(p)
                    initialPos = initialPos :+ p
                case c if c.isLower =>
                    setNeighbors(p)
                    keyPos = keyPos + (p -> c.toUpper)
                case c if c.isUpper =>
                    setNeighbors(p)
                    doorPos = doorPos + (p -> c)
                case s => println(s"wtf is '$s'?")
            }
        }

        Vault(map, keyPos, doorPos, initialPos)
    }

    val example1 = 
    """
    #########
    #b.A.@.a#
    #########
    """

    val example2 =
    """
    ########################
    #f.D.E.e.C.b.A.@.a.B.c.#
    ######################.#
    #d.....................#
    ########################
    """

    val example3 =
    """
    ########################
    #...............b.C.D.f#
    #.######################
    #.....@.a.B.c.d.A.e.F.g#
    ########################
    """

    val example4 =
    """
    #################
    #i.G..c...e..H.p#
    ########.########
    #j.A..b...f..D.o#
    ########@########
    #k.E..a...g..B.n#
    ########.########
    #l.F..d...h..C.m#
    #################
    """

    val example5 =
    """
    ########################
    #@..............ac.GI.b#
    ###d#e#f################
    ###A#B#C################
    ###g#h#i################
    ########################
    """

    val puzzleInputPart1 = """
    #################################################################################
    #.............#...#...O.#.#...........#.#...#.........#.......#.....#.......#.Z.#
    #####.#######.#H#.#.###.#.#.#####.###.#.#.###.#####.#.#.#####.#.###.#.###.###.#.#
    #.....#.#...#.#.#...#.#.#.#.#.#...#.....#.#...#...#.#.#...#w..#...#...#.#.....#.#
    #.#####.#.#.#.#.#####.#.#.#B#.#.#########.#.###.#.#.#####.#.#####.#####.#######.#
    #.#...#...#.....#...#.#.#.....#.........#.#.#...#.#.....#.#...#..y..#...#.....#.#
    #.#.#.#.#########.#.#.#.###########.###.#.#.#.#######.###.###.#####.#.#.#.###.#.#
    #.#.#...#.........#.#.......#.....#...#.#.#.#.#.....#.....#.#.#...#...#.#.#...#.#
    #.###.###.#########.#######.#.###.#####.#.#.#.#.###.#######.#.#.#.#####.#.#.###.#
    #...#.#.....#x....#.#..f..#...#...#...#.#.#.#.....#.....#i..#...#.#...#.#.#.#...#
    #.#.#.#.#####.###.#.#A###.#####.###.#.#.#.#.#########.#.#.#.#####.#.#.###.#.#.#.#
    #.#.#.#.#...#.#.#.#...#.#.#...#.#.T.#...#.#...#.....#.#...#.#.#..e#.#.....#.#.#.#
    ###.###.#X#.#.#.#.#.###.#.###.#.###.###.#.###.#.###.#.#####.#.#.###.#######.#.#.#
    #...#d..#.#...#.#.#.....#...#.#...#...#.#...#.#.#.....#.......#.#.....#.#...#.#.#
    #.###.###.#####R#.#####.###.#.###.###.#.#.#.#.#.###########.###.#.###.#.#.#####.#
    #...#.#.#...#.......#...#...#...#.....#.#.#...#.....#.....#.#...#...#.#...#...#.#
    ###E#.#.###.#######.#####.###.#.#######.#.#####.###N#.###.###.###.###.#.###.#.#.#
    #.#...#...#..c..#...#r..F.#...#.....#.#.#...#.#.#.#.#...#.#...#...#...#.....#.#.#
    #.#####.#######.###.#.#######.#####.#.#.###.#.#.#.#.###.#.#.###.###.#########.#.#
    #z....#.......#...#...#.....#s#.......#.#.#.#.....#...#.#...#v..#.#...#.....#...#
    #.#.###.#.#######.#####G###.#.#######.#.#.#.#####.#.###.#######.#.###.#.#######.#
    #.#.#...#.......#...#...#.#.#...#...#.#.#.#.....#.#...#.D.....#.....#.#.......#.#
    ###.#.#########.###C#####.#.#.#.#.#.###.#.#####.#####.###############.#.#####.#.#
    #...#...#.....#...#....g....#.#.#.#.....#.....#.....#...........#.....#.....#...#
    #.#####.#.###.#.#############.#.#.#######.#########.#.#######.#.#.#########.#####
    #.....#...#...#.#.........#...#.#.#.....#.........#.#.#.....#.#...#.......#.#..u#
    #Q#.#######.###.#.#.#.#####.###.#.#####.#.#######.#.###.###.#.#####.###.#.#.#.###
    #.#.......#.#...#.#.#.#...#.#.#...#...#.#.#.....#.#.#...#.#.#...#.....#.#.#.#...#
    #.#####.###.#.###.#.###.#.#.#.#####.#.#.#.#.###.#.#.#.###.#.#.#.#######.#.#.#.#.#
    #...#...#...#.....#.....#...#.......#...#.#.#.#.K.#...#.#...#.#.#.......#.#.#.#.#
    ###.#.###.#####################.###.#####.#.#.#.#######.#.#####.#.#####.###.#.#.#
    #...#.....#...#.....#.........#...#.#...#.#.#...#.......#...#...#...#...#...#.#.#
    #.#########.###.###.#.###.###.###.#.#.#.###.#####.#.###.###.#.###.#.#.###.#####.#
    #.#.....#.........#...#...#.#.#.#.#.#.#.#...#.....#.#l..#.#.#...#.#.#...#...#...#
    #.###.#.###.###########.###.#.#.#.#.#.#.#.###.#####.#.###.#.###.#.#.#.#####.#.#.#
    #.#...#...#...#...#.....#...#.#...#...#.#...#.#.#...#.....#.....#.#.#.#...#.#.#.#
    #.#.#####.#.###.#.#.#####.###.#########.#.#.#.#.#.#################.###.#.#P#.#.#
    #.#.#.....#.#...#.#...#.#...#.#.....#...#.#.#.#.#.#.................#...#...#.#.#
    #.#.#.#######.###.###.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#########.#######.#######.#.#
    #.U.#p........#....j..#...#.....#.....#...#.....#...........#...........J.....#.#
    #######################################.@.#######################################
    #...#.....#...#.......#.........#.........#.....#.....#.....#.....#.............#
    #.#.#.###.###.#.#L###.#.#####.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#########.#.#
    #.#...#.....#...#...#.#.#...#.....#...#.#...#.....#.....#.#.#.#.#.#.#.......#q#.#
    #.#.#######.#.#####.#.###.#.#########.#.#.###############.###.#.#.###.#####.###.#
    #.#.#.....#.#...#...#.....#.#.........#.#.#.....#.....#...#...#.#.....#...#...#.#
    #.#.#.###.#.#####.#########.#.#########.#.#.#.#.#.###.#.###.###.#.#####.#.###.#.#
    #.#.#...#.#.....#.....#...#...#.......#.#.#.#.#...#...#.#.....#.#.#...#.#...#...#
    #.#####.#.#####.#####.#.#######.###.###.#.#.#.#####.###.#.#####.#.#.#.#.###.###.#
    #.....#.#...#...#...#.#...........#...#.#k#.#...#.....#.#.#.....#.#.#.#...#...#.#
    #####.#.###.###.#.#.#.#.#############.#.#.#.###.#.#####.#.#.#######.#.###.#.###.#
    #.....#...#...#...#...#.#...........#...#.#...#.#...#...#.#...#...#.#...#.#.....#
    #.#######.###.#####.#####.#########.#.###.#####.###.#.###.###.#.#.#.###.#.#######
    #.......#...#.....#.#.....#.......#.#...#.......#.#.#.#...#.#...#.....#.#.#.....#
    #.###.#####.#####.###.#####.#.#.###.#############.#.#.#.###.###########.#.#.###.#
    #...#.#.........#...#.#.....#.#.#...#...#...#.....#.#...#...#.......#...#.#.#m..#
    #.###.#.###########.#.#######.###.###.#.#.#.#.#.###.#####.#.#######.#.###.#.#.#.#
    #.#...#...#.#.......#...#...#.W...#...#.#.#.#.#.....#.....#...#.....#...#.#.#.#.#
    ###.#.###.#.#.#########.#.#.#####.###.#.#.###.#######.#######.#.###.###.#.###.#.#
    #...#...#...#...#.....#...#.....#...#.#.#.#...#.........#.......#.#.#...#.....#.#
    #.#########.###.#.#.###########.###.#.#.#.#.###.#######.#.#######.#.#.#########.#
    #.........#.#...#.#.#....a......#.#...#.#.#...#.#.......#.#...#.....#.#...#.....#
    #.#######.#.#.###.#.#############.#####.#.###.#.#.#######.#.###.#####.###.#.#####
    #.#.....#...#.#...#.....#...#.......#h..#.....#.#.#.......#.#...#...#...#.#.#...#
    #.###.#.#####.#.#####.#.#.#.#.#####.#.###.#######.#######.#.#####.#.###.#.#.#.#.#
    #...#.#...#...#.#...#.#.#.#..o#...#...#.#.......#.......#.#.....#.#.#...#.....#.#
    ###.#####.#.#.#.###.#.###.#######.#####.#######.#.#####.#######.#.#.#.###########
    #.#...#...#.#.#.....#.....#.#.......#...#...#...#.....#.......#.#.#.#...#.......#
    #.###.#.###.#.#####.#######.#.#I###.###.#.#.#.###########.###.#.#.#.###.#.#####.#
    #...#...#...#.....#.#.#.....#.#...#t..#.#.#...#.........#.#.#.#...#...#...#.....#
    #.#####.#.#########.#.#.###.#.###.###.#.#.#####.#######.#.#.#.#######.#####.#####
    #...M...#.......#...#...#.#...#.#...#...#.......#.....#.#.#.........#.....#.#...#
    #.#############.#.###.###.#####.###.#############.#####.#.#.#######.#####.#.###.#
    #.#.....Y...#.#.#.#.#.#..b..#...#.#.#...#...#.........#.#.#.#...#.#.#...#...#...#
    #.#.#######.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#####.#.#
    #...#n....#.#.#...#.......#...#...#...#.#.#.#.#.....#...#.....#.#...#.#.......#.#
    #####.###.#.#.###################.#####.#.###.#.###.#####V#####.#.###.###.#####.#
    #.....#...#...#.....#...#...#.....#.....#.....#...#...........#.#...#.#...#.....#
    #.###########.###.#.#.#.#.#.#######.###.#.#####################.###.###.###.#####
    #.................#...#...#.........#.S.#.......................#.......#.......#
    #################################################################################
    """

        val puzzleInputPart2 = """
    #################################################################################
    #.............#...#...O.#.#...........#.#...#.........#.......#.....#.......#.Z.#
    #####.#######.#H#.#.###.#.#.#####.###.#.#.###.#####.#.#.#####.#.###.#.###.###.#.#
    #.....#.#...#.#.#...#.#.#.#.#.#...#.....#.#...#...#.#.#...#w..#...#...#.#.....#.#
    #.#####.#.#.#.#.#####.#.#.#B#.#.#########.#.###.#.#.#####.#.#####.#####.#######.#
    #.#...#...#.....#...#.#.#.....#.........#.#.#...#.#.....#.#...#..y..#...#.....#.#
    #.#.#.#.#########.#.#.#.###########.###.#.#.#.#######.###.###.#####.#.#.#.###.#.#
    #.#.#...#.........#.#.......#.....#...#.#.#.#.#.....#.....#.#.#...#...#.#.#...#.#
    #.###.###.#########.#######.#.###.#####.#.#.#.#.###.#######.#.#.#.#####.#.#.###.#
    #...#.#.....#x....#.#..f..#...#...#...#.#.#.#.....#.....#i..#...#.#...#.#.#.#...#
    #.#.#.#.#####.###.#.#A###.#####.###.#.#.#.#.#########.#.#.#.#####.#.#.###.#.#.#.#
    #.#.#.#.#...#.#.#.#...#.#.#...#.#.T.#...#.#...#.....#.#...#.#.#..e#.#.....#.#.#.#
    ###.###.#X#.#.#.#.#.###.#.###.#.###.###.#.###.#.###.#.#####.#.#.###.#######.#.#.#
    #...#d..#.#...#.#.#.....#...#.#...#...#.#...#.#.#.....#.......#.#.....#.#...#.#.#
    #.###.###.#####R#.#####.###.#.###.###.#.#.#.#.#.###########.###.#.###.#.#.#####.#
    #...#.#.#...#.......#...#...#...#.....#.#.#...#.....#.....#.#...#...#.#...#...#.#
    ###E#.#.###.#######.#####.###.#.#######.#.#####.###N#.###.###.###.###.#.###.#.#.#
    #.#...#...#..c..#...#r..F.#...#.....#.#.#...#.#.#.#.#...#.#...#...#...#.....#.#.#
    #.#####.#######.###.#.#######.#####.#.#.###.#.#.#.#.###.#.#.###.###.#########.#.#
    #z....#.......#...#...#.....#s#.......#.#.#.#.....#...#.#...#v..#.#...#.....#...#
    #.#.###.#.#######.#####G###.#.#######.#.#.#.#####.#.###.#######.#.###.#.#######.#
    #.#.#...#.......#...#...#.#.#...#...#.#.#.#.....#.#...#.D.....#.....#.#.......#.#
    ###.#.#########.###C#####.#.#.#.#.#.###.#.#####.#####.###############.#.#####.#.#
    #...#...#.....#...#....g....#.#.#.#.....#.....#.....#...........#.....#.....#...#
    #.#####.#.###.#.#############.#.#.#######.#########.#.#######.#.#.#########.#####
    #.....#...#...#.#.........#...#.#.#.....#.........#.#.#.....#.#...#.......#.#..u#
    #Q#.#######.###.#.#.#.#####.###.#.#####.#.#######.#.###.###.#.#####.###.#.#.#.###
    #.#.......#.#...#.#.#.#...#.#.#...#...#.#.#.....#.#.#...#.#.#...#.....#.#.#.#...#
    #.#####.###.#.###.#.###.#.#.#.#####.#.#.#.#.###.#.#.#.###.#.#.#.#######.#.#.#.#.#
    #...#...#...#.....#.....#...#.......#...#.#.#.#.K.#...#.#...#.#.#.......#.#.#.#.#
    ###.#.###.#####################.###.#####.#.#.#.#######.#.#####.#.#####.###.#.#.#
    #...#.....#...#.....#.........#...#.#...#.#.#...#.......#...#...#...#...#...#.#.#
    #.#########.###.###.#.###.###.###.#.#.#.###.#####.#.###.###.#.###.#.#.###.#####.#
    #.#.....#.........#...#...#.#.#.#.#.#.#.#...#.....#.#l..#.#.#...#.#.#...#...#...#
    #.###.#.###.###########.###.#.#.#.#.#.#.#.###.#####.#.###.#.###.#.#.#.#####.#.#.#
    #.#...#...#...#...#.....#...#.#...#...#.#...#.#.#...#.....#.....#.#.#.#...#.#.#.#
    #.#.#####.#.###.#.#.#####.###.#########.#.#.#.#.#.#################.###.#.#P#.#.#
    #.#.#.....#.#...#.#...#.#...#.#.....#...#.#.#.#.#.#.................#...#...#.#.#
    #.#.#.#######.###.###.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#########.#######.#######.#.#
    #.U.#p........#....j..#...#.....#.....#@#@#.....#...........#...........J.....#.#
    #################################################################################
    #...#.....#...#.......#.........#......@#@#.....#.....#.....#.....#.............#
    #.#.#.###.###.#.#L###.#.#####.###.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#########.#.#
    #.#...#.....#...#...#.#.#...#.....#...#.#...#.....#.....#.#.#.#.#.#.#.......#q#.#
    #.#.#######.#.#####.#.###.#.#########.#.#.###############.###.#.#.###.#####.###.#
    #.#.#.....#.#...#...#.....#.#.........#.#.#.....#.....#...#...#.#.....#...#...#.#
    #.#.#.###.#.#####.#########.#.#########.#.#.#.#.#.###.#.###.###.#.#####.#.###.#.#
    #.#.#...#.#.....#.....#...#...#.......#.#.#.#.#...#...#.#.....#.#.#...#.#...#...#
    #.#####.#.#####.#####.#.#######.###.###.#.#.#.#####.###.#.#####.#.#.#.#.###.###.#
    #.....#.#...#...#...#.#...........#...#.#k#.#...#.....#.#.#.....#.#.#.#...#...#.#
    #####.#.###.###.#.#.#.#.#############.#.#.#.###.#.#####.#.#.#######.#.###.#.###.#
    #.....#...#...#...#...#.#...........#...#.#...#.#...#...#.#...#...#.#...#.#.....#
    #.#######.###.#####.#####.#########.#.###.#####.###.#.###.###.#.#.#.###.#.#######
    #.......#...#.....#.#.....#.......#.#...#.......#.#.#.#...#.#...#.....#.#.#.....#
    #.###.#####.#####.###.#####.#.#.###.#############.#.#.#.###.###########.#.#.###.#
    #...#.#.........#...#.#.....#.#.#...#...#...#.....#.#...#...#.......#...#.#.#m..#
    #.###.#.###########.#.#######.###.###.#.#.#.#.#.###.#####.#.#######.#.###.#.#.#.#
    #.#...#...#.#.......#...#...#.W...#...#.#.#.#.#.....#.....#...#.....#...#.#.#.#.#
    ###.#.###.#.#.#########.#.#.#####.###.#.#.###.#######.#######.#.###.###.#.###.#.#
    #...#...#...#...#.....#...#.....#...#.#.#.#...#.........#.......#.#.#...#.....#.#
    #.#########.###.#.#.###########.###.#.#.#.#.###.#######.#.#######.#.#.#########.#
    #.........#.#...#.#.#....a......#.#...#.#.#...#.#.......#.#...#.....#.#...#.....#
    #.#######.#.#.###.#.#############.#####.#.###.#.#.#######.#.###.#####.###.#.#####
    #.#.....#...#.#...#.....#...#.......#h..#.....#.#.#.......#.#...#...#...#.#.#...#
    #.###.#.#####.#.#####.#.#.#.#.#####.#.###.#######.#######.#.#####.#.###.#.#.#.#.#
    #...#.#...#...#.#...#.#.#.#..o#...#...#.#.......#.......#.#.....#.#.#...#.....#.#
    ###.#####.#.#.#.###.#.###.#######.#####.#######.#.#####.#######.#.#.#.###########
    #.#...#...#.#.#.....#.....#.#.......#...#...#...#.....#.......#.#.#.#...#.......#
    #.###.#.###.#.#####.#######.#.#I###.###.#.#.#.###########.###.#.#.#.###.#.#####.#
    #...#...#...#.....#.#.#.....#.#...#t..#.#.#...#.........#.#.#.#...#...#...#.....#
    #.#####.#.#########.#.#.###.#.###.###.#.#.#####.#######.#.#.#.#######.#####.#####
    #...M...#.......#...#...#.#...#.#...#...#.......#.....#.#.#.........#.....#.#...#
    #.#############.#.###.###.#####.###.#############.#####.#.#.#######.#####.#.###.#
    #.#.....Y...#.#.#.#.#.#..b..#...#.#.#...#...#.........#.#.#.#...#.#.#...#...#...#
    #.#.#######.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#####.#.#
    #...#n....#.#.#...#.......#...#...#...#.#.#.#.#.....#...#.....#.#...#.#.......#.#
    #####.###.#.#.###################.#####.#.###.#.###.#####V#####.#.###.###.#####.#
    #.....#...#...#.....#...#...#.....#.....#.....#...#...........#.#...#.#...#.....#
    #.###########.###.#.#.#.#.#.#######.###.#.#####################.###.###.###.#####
    #.................#...#...#.........#.S.#.......................#.......#.......#
    #################################################################################
    """
}